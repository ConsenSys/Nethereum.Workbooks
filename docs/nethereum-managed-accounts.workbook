---
packages:
- id: Nethereum.Web3
  version: 3.0.0
uti: com.xamarin.workbook
id: d89bf107-43a9-4333-b74a-848da59c6b70
title: nethereum-managed-accounts
platforms:
- Console
---

# Using Nethereum managed accounts

This document is a Workbook, find more about workbooks' installation requirements  [here](https://docs.microsoft.com/en-us/xamarin/tools/workbooks/install).

Documentation about Nethereum can be found at: <https://nethereum.readthedocs.io>

First, let's download the test chain matching your environment from <https://github.com/Nethereum/Testchains>

Start a Geth chain (geth-clique-linux\\, geth-clique-windows\\ or geth-clique-mac\\) using **startgeth.bat** (Windows) or **startgeth.sh** (Mac/Linux). The chain is setup with the Proof of Authority consensus and will start the mining process immediately.

```csharp
#r "Nethereum.Web3"
#r "Nethereum.Accounts"
```

```csharp
using Nethereum.Web3;
using Nethereum.Web3.Accounts;
using Nethereum.Web3.Accounts.Managed;
using Nethereum.Hex.HexConvertors;
using Nethereum.Hex.HexTypes;
```

Clients retrieve the private key for an account (if stored on their keystore folder) using a password provided to decrypt the file. This is done when unlocking an account, or just at the time of sending a transaction if using personal\_sendTransaction with a password.

Having an account unlocked for a certain period of time might be a security issue, so the prefered option in this scenario, is to use the rpc method `personal_sendTransaction`.

Nethereum.Web3 wraps this functionality by using a ManagedAccount, having the managed account storing the account address and the password information.

```csharp
var senderAddress = "0x12890d2cce102216644c59daE5baed380d84830c";
var password = "password";
var account = new ManagedAccount(senderAddress, password);
var web3 = new Nethereum.Web3.Web3(account);
```

When used in conjuction with Web3, now in the same way as an "Account", you can:

Transfer an amount to another address, using the transaction manager:

```csharp
var addressTo = "0x13f022d72158410433cbd66f5dd8bf6d2d129924";
await web3.TransactionManager.SendTransactionAsync(account.Address, addressTo, new HexBigInteger(20));
```

Deploy a contract:

```csharp
web3.Eth.DeployContract.SendRequestAsync(abi, byteCode, senderAddress, new HexBigInteger(900000),
                            multiplier)
```

Make a contract Function transaction:

```csharp
var multiplyFunction = contract.GetFunction("multiply");
await multiplyFunction.SendTransactionAsync(senderAddress,7);
```
