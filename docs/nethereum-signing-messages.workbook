---
uti: com.xamarin.workbook
id: e5cc8ec1-5a9d-4ff2-b229-a7c1d489a8ca
title: nethereum-signing-messages
platforms:
- Console
packages:
- id: Nethereum.Web3
  version: 3.0.0
---

# Signing messages with Nethereum

This document is a Workbook, find more about workbooks' installation requirements  [here](https://docs.microsoft.com/en-us/xamarin/tools/workbooks/install).

Nethereum allows you to sign any type of data using Ethereum signature format. The following is a quick guide to signing a string with Nethereum and verifying a signature using various methods.

```csharp
#r "Nethereum.Web3"
```

```csharp
using Nethereum.Web3;
using Nethereum.Signer;
using Nethereum.Hex.HexConvertors.Extensions;
```

Signing a message allows to certify that a piece of data was signed by a specific sending account. A signed message proves the origin of a message without revealing the private key of its signer account.

The below shows how to sign an arbitrary string:

* **address** declares the sender's address:

```csharp
var address = "0x12890d2cce102216644c59dae5baed380d84830c";
```

* **msg1** declares the content of the message itself, here it's a simple string:

```csharp
var msg1 = "wee test message 18/09/2017 02:55PM";
```

* **privatekey** declares the **address** private key:

```csharp
var privateKey = "0xb5b1870957d373ef0eeffecc6e4812c0fd08f554b37b233526acc331bf1544f7";
```

* **signer1** creates an instance of the **EthereumMessageSigner** object:

```csharp
var signer1 = new EthereumMessageSigner();
```
#### Encoding and signing a message using EncodeUTF8AndSign:

* Using **EncodeUTF8AndSign** we can encode the sender's msg (`msg1`) with their private key (`privateKey`) which will return a string. That string (`signature1`) represents the signature.

```csharp
var signature1 = signer1.EncodeUTF8AndSign(msg1, new EthECKey(privateKey));
```

#### Encoding and recovering the address of the signer's message and signature using EncodeUTF8AndEcRecover:

**addressRec1** evaluates to the signer's address, thus proving the validity of the message. In this case the **EncodeUTF8AndEcRecover** method is used:

```csharp
var addressRec1 = signer1.EncodeUTF8AndEcRecover(msg1, signature1);
```

#### Hashing and signing a message using HashAndSign:

```csharp
var msg2 = "test";
var signer2 = new EthereumMessageSigner();
var signature2 = signer2.HashAndSign(msg2,
                "0xb5b1870957d373ef0eeffecc6e4812c0fd08f554b37b233526acc331bf1544f7");
```

#### Hashing and recovering the address of the signer's message using HashAndEcRecover:

```csharp
var addressRec2 = signer2.HashAndEcRecover(msg2, signature2);
```

```csharp
var msg3 = "test";
var signer3 = new EthereumMessageSigner();
var signature3 = signer3.EncodeUTF8AndSign(msg3, new EthECKey(privateKey));
```

```csharp
var addressRec3 = signer3.EncodeUTF8AndEcRecover(msg3, signature3);
```

* Please note: you can verify the validity of your signature at the following link:
<https://etherscan.io/verifySig>
