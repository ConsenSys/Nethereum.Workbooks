---
uti: com.xamarin.workbook
id: 55d1dc1f-9642-41e3-a422-a56b97012440
title: nethereum-message-signers
platforms:
- Console
packages:
- id: Nethereum.Web3
  version: 3.0.0
---

# Nethereum: signing a message

This document is a Workbook, find more about workbooks' installation requirements  [here](https://docs.microsoft.com/en-us/xamarin/tools/workbooks/install).

This workbook explains how to sign function and deployment messages as well functions 

Background:

In the Ethereum environment, functions don't return anything. In order to compensate for that limitation,Â  Solidity offers a way to log state changes which is called Event. The following explains how to track events using Nethereum.

## Prerequisites:

Download the test chain matching your environment from https://github.com/Nethereum/Testchains

Start a Geth chain ( **geth-clique-linux\_** **_geth-clique-windows_** **_geth-clique-mac_**) using startgeth.bat (Windows) or startgeth.sh (Mac/Linux). The chain is setup with the Proof of Authority consensus and will start the mining process immediately.

```csharp
#r "Nethereum.Web3"
```
##### Signing a Function / Deployment message online / offline

The TransactionHandler also provides a mechanism to sign the Function and Deployments messages, provided we use an Account and/or ExternalAccount

```csharp
var signedTransaction = await transferHandler.SignTransactionAsync(ContractAddress, transfer);
```

Nethereum internally calls the Ethereum client to set the GasPrice, Nonce and estimate the Gas, so if want to sign the transaction for the contract completely offline we will need to set those values before hand.

```csharp
transfer.Nonce = 2;
transfer.Gas = 21000;
transfer.GasPrice =  Nethereum.Web3.Web3.Convert.ToWei(25, UnitConversion.EthUnit.Gwei);
var signedTransaction = await transferHandler.SignTransactionAsync(ContractAddress, transfer);
```

